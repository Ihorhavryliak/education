// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                Int       @id @default(autoincrement())
  name              String?
  email             String?   @unique
  password          String
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  isComplateProgram Program[]
  isComplateCurse   Curse[]
  isComplateTask Task[]
  isComplateQuestion Question[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GeneralProgram {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  shortName    String
  coursesPages Program[]
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

// plan curse
model Program {
  id                Int             @id @default(autoincrement())
  name              String
  description       String
  coursesPages      Curse[]
  generalProgramId  Int?
  generalProgram    GeneralProgram? @relation(fields: [generalProgramId], references: [id])
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())
  isComplateProgram User[]
}

//one curse with tasks
model Curse {
  id               Int        @id @default(autoincrement())
  name             String
  descriptionCurse String
  video            String?
  theory           String?
  question         Question[]
  task             Task[]
  img              String?
  rating           Int?

  title           String?
  description     String?
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  program         Program[]
  programId       Int?
  sort            Int?
  isComplateCurse User[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  curseId     Int
  curse       Curse    @relation(fields: [curseId], references: [id])
  isComplateTask  User[]
}

model Question {
  id         Int      @id @default(autoincrement())
  name       String
  answer     String
  curseId    Int
  curse      Curse    @relation(fields: [curseId], references: [id])
  isComplateQuestion User[]
}

model Rating {
  id      Int @id @default(autoincrement())
  userId  Int
  curseId Int
  rating  Int
}
