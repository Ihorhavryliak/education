generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Int?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GeneralProgram {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  shortName    String
  url          String?   @unique
  coursesPages Program[]
}

model Program {
  id Int @id @default(autoincrement())

  name             String
  description      String
  generalProgramId Int?
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  url              String?         @unique
  generalProgram   GeneralProgram? @relation(fields: [generalProgramId], references: [id])
  coursesPages     Curse[]         @relation("CurseToProgram")
  order            Int?
}

model Curse {
  id               Int        @id @default(autoincrement())
  name             String
  descriptionCurse String
  img              String?
  rating           Int?
  title            String?
  description      String?
  updatedAt        DateTime   @updatedAt
  createdAt        DateTime   @default(now())
  programId        Int?
  theory           String?
  video            String?
  sort             Int?
  url              String?    @unique
  question         Question[]
  task             Task[]
  program          Program[]  @relation("CurseToProgram")
}

model Task {
  id             Int     @id @default(autoincrement())
  video          String?
  videoSolution  String?
  solution       String?
  lessonSolution String?
  name           String
  description    String
  curseId        Int
  curse          Curse   @relation(fields: [curseId], references: [id])
  sort           Int?
}

model Question {
  id      Int    @id @default(autoincrement())
  name    String
  answer  String
  curseId Int
  sort    Int?
  curse   Curse  @relation(fields: [curseId], references: [id])
}

model Rating {
  id      Int @id @default(autoincrement())
  userId  Int
  curseId Int
  rating  Int
}

model Complete {
  id                Int  @id @default(autoincrement())
  userId            Int?
  completeProgramId Int?

  generalProgramId Int?
  programId        Int?
  courseId         Int?

  theoryId     Int?
  taskId       Int?
  solutionTask String?
  questionId   Int?
}
